buildscript {
    ext {
        kotlinVersion = '1.3.72'
        // there is a problem with springboot 2.2.9 while executing tests
        // it is spawning numerous mongodb process and the test execution hangs
        // if you encounter this problem, downgrade to 2.2.8
        springBootVersion = '2.2.9.RELEASE'
        springSecurityVersion = '5.3.3.RELEASE'
        springRestDocsVersion = '2.0.4.RELEASE'
        springWiremockVersion = '2.2.4.RELEASE'
        jwtVersion = '0.11.2'
        retrofitVersion = '2.9.0'
        swaggerVersion = '3.0.0'
        ktLintVersion = '0.37.2'
        okHttpVersion = '4.8.0'
        // it has to be the same version as required by spring-boot-starter-test
        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test/2.2.9.RELEASE
        junitVersion = '5.5.2'
        // snippetsDir = file("build/generated-snippets")
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
    id("com.github.ben-manes.versions").version("0.29.0")
    id("org.sonarqube").version("3.0")
    id("org.jetbrains.kotlin.plugin.jpa").version("1.3.72")
    id("org.jetbrains.kotlin.plugin.spring").version("1.3.72")
    id("io.gitlab.arturbosch.detekt").version("1.10.0")
//    id("info.solidsoft.pitest").version("1.5.1")
//    id("org.asciidoctor.jvm.convert").version("2.3.0")
}

apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply from: "$projectDir/gradle/sonar.gradle"
apply from: "$projectDir/gradle/wiremock.gradle"

group = 'com.vguivarc.musicme.backend'
version = '0.1.0'
sourceCompatibility = 11
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

// START generate api version properties file
springBoot {
    buildInfo()
}
// END generate api version properties file

test {
//    outputs.dir snippetsDir
    String activeProfile = System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

detekt {
    config = files("detekt-config.yml")
    failFast = false
}

//asciidoctor {
//    dependsOn test
//    inputs.dir snippetsDir
//    sourceDir 'src/main/asciidoc'
//    outputDir 'build/docs'
//}

//pitest {
//    targetClasses = ['com.swag.backend.*'] //by default "${project.group}.*"
//    // pitestVersion = '1.1.0' //not needed when a default PIT version should be used
//    threads = 4
//    excludedClasses = ['org.jetbrains.ktor.locations.Locations*', '*Integration*']
//    outputFormats = ['XML', 'HTML']
//    timestampedReports = false
//    coverageThreshold = 95
//    mutationThreshold = 95
//    timeoutConstInMillis = 8000
//}

wiremock {
    port = 8081
}

//KTLINT config
configurations {
    ktlint
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

check.dependsOn ktlint

//heroku config
task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean
gradle.taskGraph.whenReady {
    taskGraph ->
        if (taskGraph.hasTask(stage)) {
            test.enabled = false
        }
}
//heroku config


dependencies {

    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
        exclude module: 'spring-boot-starter-tomcat'
    }

    implementation("org.springframework.boot:spring-boot-starter-mail:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-mustache:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")

    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.11.2")
    implementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("javax.xml.bind:jaxb-api:2.3.1")

    // swagger api documentation
    implementation("io.springfox:springfox-boot-starter:${swaggerVersion}")

    // spring mvc api documentation
    implementation("org.springframework.restdocs:spring-restdocs-mockmvc:${springRestDocsVersion}")

    // jwt tokens
    implementation("io.jsonwebtoken:jjwt-api:${jwtVersion}")
    runtimeOnly("io.jsonwebtoken:jjwt-impl:${jwtVersion}")
    runtimeOnly("io.jsonwebtoken:jjwt-jackson:${jwtVersion}")

    implementation("com.squareup.retrofit2:retrofit:${retrofitVersion}")
    implementation("com.squareup.retrofit2:converter-jackson:${retrofitVersion}")
    implementation("com.squareup.okhttp3:logging-interceptor:${okHttpVersion}")

    // apache common libs
    implementation('org.apache.commons:commons-lang3:3.11')

    // lorem ipsum for test/mock data
    implementation("com.thedeanda:lorem:2.1")

    testCompile("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude group: 'junit', module: 'junit;'
    }

    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc:${springRestDocsVersion}")
    testImplementation("org.springframework.security:spring-security-test:${springSecurityVersion}")
    testImplementation("org.springframework.cloud:spring-cloud-contract-wiremock:${springWiremockVersion}")
    testImplementation("org.assertj:assertj-core:3.16.1")
    testCompile("org.jacoco:org.jacoco.agent:0.8.5")

    developmentOnly("org.springframework.boot:spring-boot-devtools:${springBootVersion}")

    ktlint("com.pinterest:ktlint:$ktLintVersion")

    //asciidoctor("org.springframework.restdocs:spring-restdocs-asciidoctor:${springRestDocsVersion}")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")

    /** MongoDB **/
    compile("org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}")
    compile("org.javassist:javassist:3.27.0-GA") // workaround for ${javassist.version} placeholder issue*
    testImplementation("org.testcontainers:mongodb:1.15.1")
    compile("com.github.appstud:mongobee:0.14")


}

apply from: rootProject.file("gradle/setup.gradle")
